name: Automação Selenium - Compra Standard
on: [push, pull_request]

jobs:
  Autimation-Saucedemo-Site_Compras:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Chrome and Driver
      shell: pwsh
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile chrome_installer.exe
        Start-Process -FilePath .\chrome_installer.exe -Args "/silent /install" -Wait
        Remove-Item chrome_installer.exe
        python -m pip install webdriver-manager

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest pytest-html pytest-metadata

    - name: Create pytest configuration
      run: |
        @"
        [pytest]
        addopts = 
            -v
            --html={htmlpath}
            --self-contained-html
            --capture=sys
            --show-capture=log
        metadata =
            Runner: GitHub Actions
            Python: 3.9
            Platform: Windows
        "@ > pytest.ini

    - name: Run Standard Test
      run: |
        python -m pytest test_execution/test_execution_compra_standard.py --html=relatorio_standard.html --self-contained-html
      
    - name: Run Visual True Test
      run: |
        python -m pytest test_execution/test_execution_compra_visual_true.py --html=relatorio_visual_true.html --self-contained-html
      
    - name: Run Problem Test
      run: |
        python -m pytest test_execution/test_execution_compra_problem.py --html=relatorio_problem.html --self-contained-html

    - name: Process and upload reports
      shell: pwsh
      run: |
        # Processa cada relatório individualmente
        $files = @("relatorio_standard.html", "relatorio_visual_true.html", "relatorio_problem.html")
        
        foreach ($file in $files) {
            if (Test-Path $file) {
                $content = Get-Content -Path $file -Raw
                $content = $content -replace '<\s*br\s*/?>', '<br>' -replace '<\s*/\s*div\s*>', '</div>'
                $processedName = "processed_$file"
                $content | Out-File -FilePath $processedName -Encoding utf8 -Force
                Write-Output "Processed $file to $processedName"
            } else {
                Write-Warning "File $file not found!"
            }
        }

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: relatorios-automacao
        path: |
          processed_relatorio_standard.html
          processed_relatorio_visual_true.html
          processed_relatorio_problem.html
        if-no-files-found: error